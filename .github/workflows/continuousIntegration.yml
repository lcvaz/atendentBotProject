name: CI Node.js

on:
  push:
    branches: [ "main", "desenvolvimento" ]
  pull_request:
    branches: [ "main", "desenvolvimento" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.x'
        cache: 'npm'
    - run: npm ci # 'ci' é mais rápido e seguro para automação do que 'install'
    - run: npm run lint
    - name: Type Checking
      run: npx tsc --noEmit 
    - name: Security Audit
      run: npm audit --audit-level=high 
    - name: Run Tests
      run: npm test -- --coverage 
      
  docker_login:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: login docker 
      uses: docker/login-action@v3.5.0 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Extract metadata
      id: meta 
      # cria uma "variável" que outros steps podem referenciar
      uses: docker/metadata-action@v5
      with:
        images: lucasvazdev/chatBotProject 
        # define o nome base da sua imagem no Docker Hub 
        tags: | 
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        # tags, que são as regras para criar diferentes "versões" da sua imagem
        # type=ref,event=branch: Esta regra cria uma tag baseada no nome da branch. Se você fizer push na branch "desenvolvimento", criará uma tag chamada "desenvolvimento". 
        # É como ter uma versão específica para cada linha de desenvolvimento do seu projeto.
        # type=sha,prefix={{branch}}-: Pega o hash do commit (SHA) e adiciona o nome da branch como prefixo. 
        # Por exemplo, se você está na branch "main" e o commit é "abc123", criará a tag "main-abc123". Isso garante identificação única de cada versão, 
        # como um número de série para cada build.
        # type=raw,value=latest,enable={{is_default_branch}}: Esta regra cria a tag "latest" apenas quando você está na branch principal (geralmente "main"). 
        # A tag "latest" é uma convenção Docker que indica a versão mais recente e estável
    - name: build and push
      uses: docker/build-push-action@v6.18.0
      with:
       context: .
       # O "contexto" é como definir o diretório de trabalho para o Docker. O ponto (.) significa "use o diretório atual". 
       # É como dizer "construa a imagem usando todos os arquivos desta pasta".
       file: ./Dockerfile 
       # Especifica qual arquivo contém as instruções de construção. É como um "manual de montagem" para sua aplicação.
       push: true
       # Esta configuração determina se a imagem será enviada ao Docker Hub após ser construída. 
       tags: ${{ steps.meta.outputs.tags }}
       # Estamos usando as tags geradas. É como usar as etiquetas que preparamos anteriormente
       platforms: linux/amd64,linux/arm64 
       cache-from: type=gha 
       # pega o cache anterior ao buildar
       cache-to: type=gha,mode=max
       # salva o cache para builds futuras
        
